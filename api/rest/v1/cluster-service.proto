syntax = "proto3";
package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Cluster service";
        version: "1.0";
        contact: {
            name: "Cluster service";
            url: "";
            email: "trifan@adobe.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

//Hosts message
//last id = 2
message Hosts {
    string ip = 1;
    uint32 port = 2;
}

// Cluster message
// last id 4
message Cluster {
    // Unique clusterName
    string clusterName = 1;

    // Type of lb policy
    string LbPolicy = 2;

    // list of hosts
    repeated Hosts hosts = 3;

}

// Request data to create new Cluster
message CreateRequestCluster{
    // for which node to create the cluster
    string nodeId = 1;

    // List of clusters
    repeated Cluster cluster = 2;

    // the version
    string version = 3;
}

// Contains data of created Cluster
// last id 2
message CreateResponseCluster{
    // The node where the cluster has been created
    string nodeId = 1;

    // versions of the created clusters
    string version = 2;
}

// Request data to update a cluster
message UpdateRequestCluster{
    // node for which we create a cluster
    string nodeId = 1;

    // Cluster object to update
    Cluster cluster = 2;
}

// Contains status of update operation
message UpdateResponseCluster{
    // API versioning: it is my best practice to specify version explicitly
    string nodeId = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    string version = 2;
}

// Request data to delete cluster from a node
message DeleteRequestCluster{
    // node id
    string nodeId = 1;

    // version of cluster to delete
    string versionId = 2;
}

// Contains status of delete operation
message DeleteResponseCluster{
    // nodeId response
    string nodeId = 1;

    // contains the versions of deleted clusters
    repeated string deleted = 2;
}

// Request data to read all clusters for a node
message ReadAllRequestForNodeCluster {
    // API versioning: it is my best practice to specify version explicitly
    string nodeId = 1;
}

// Contains list of all clusters on a node
message ReadAllResponseForNodeCluster {
    // API versioning: it is my best practice to specify version explicitly
    string nodeId = 1;

    // List of all todo tasks
    repeated Cluster clusters = 2;
}

// Request to get a specific cluster
message ReadRequestCluster {
    // The nodeId where you want to get the cluster from
    string nodeId = 1;

    // The version of the cluster that you want to retrieve
    string version = 2;
}

message ReadResponseCluster {
    string nodeId = 1;
    Cluster cluster = 2;
}

// Service to manage list of Clusters
service ClusterService {
    // Read all clusters for a node
    rpc ReadAllClustersForNode(ReadAllRequestForNodeCluster) returns (ReadAllResponseForNodeCluster){
        option (google.api.http) = {
            get: "/v1/clusters/{nodeId}"
        };
    }

    // Create new clusters
    rpc CreateCluster(CreateRequestCluster) returns (CreateResponseCluster){
        option (google.api.http) = {
            post: "/v1/clusters"
            body: "*"
        };
    }

    // Delete cluster from node
    rpc DeleteCluster(DeleteRequestCluster) returns (DeleteResponseCluster){
        option (google.api.http) = {
            delete: "/v1/clusters/{nodeId}"
        };
    }
}